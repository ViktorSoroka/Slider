var CTC = (function (ctc, $) {    ctc.modules = ctc.modules || {};    console.log('Component: "Custom Slider"');    var getLeftElemOffset = function ($elem) {        return $elem.offset().left;    };    //polyfill for window.requestAnimationFrame and window.cancelAnimationFrame    (function() {        var lastTime = 0;        var vendors = ['ms', 'moz', 'webkit', 'o'];        for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {            window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];            window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame']            || window[vendors[x]+'CancelRequestAnimationFrame'];        }        if (!window.requestAnimationFrame)            window.requestAnimationFrame = function(callback, element) {                var currTime = new Date().getTime();                var timeToCall = Math.max(0, 16 - (currTime - lastTime));                var id = window.setTimeout(function() { callback(currTime + timeToCall); },                    timeToCall);                lastTime = currTime + timeToCall;                return id;            };        if (!window.cancelAnimationFrame)            window.cancelAnimationFrame = function(id) {                clearTimeout(id);            };    }());    var CustomSlider = function (elem, options) {        this.options = $.extend(this.defaults, options);        this.$wrapper = $(elem);        this.$progress = this.$wrapper.find('.' + this.options.progressClass);        this.$handle = this.$wrapper.find('.' + this.options.handleClass);        this.bindMethods();        this.init();        this.bindEventListeners();    };    CustomSlider.prototype = {        defaults: {            speed: 0.1,            handleClass: 'cs-slider_handle',            progressClass: 'cs-slider_progress',            tapping: true,            topBound: 4000        },        init: function () {            this.value = {                prev: -1,                current: 0,                target: 0            };            this.offset = {                wrapper: 0,                mouse: 0,                prev: -999999,                current: 0,                target: 0            };            this.reflow();        },        setWrapperOffset: function () {            this.offset.wrapper = getLeftElemOffset(this.$wrapper);        },        setWrappersAvailWidth: function () {            this.wrapperAvailWidth = this.$wrapper.width() - this.$handle.width();        },        reflow: function () {            this.setWrapperOffset();            this.setWrappersAvailWidth();            this.updateOffsetFromValue();        },        startTap: function () {            this.setWrapperOffset();            this.setTargetValueByOffset(                Cursor.x - this.offset.wrapper - (this.$handle.width() / 2)            );        },        startDrag: function () {            this.dragging = true;            this.setWrapperOffset();            this.offset.mouse = Cursor.x - getLeftElemOffset(this.$handle);        },        stopDrag: function () {            if (!this.dragging) {                return;            }            this.dragging = false;        },        callAnimationCallback: function () {            var value = this.value.current;            if (value != this.value.prev) {                if (typeof(this.options.animationCallback) == 'function') {                    this.options.animationCallback.call(this, Math.round(value * this.options.topBound));                }                this.value.prev = value;            }        },        animateWithRequestAnimationFrame: function (time) {            if (time) {                this.timeOffset = this.timeStamp ? time - this.timeStamp : 0;                this.timeStamp = time;            } else {                this.timeOffset = 25;            }            this.animate();            this.interval = window.requestAnimationFrame(this.animateWithRequestAnimationFrame);        },        animate: function (first) {            if (this.dragging) {                var offset = Cursor.x - this.offset.wrapper - this.offset.mouse;                this.setTargetValueByOffset(offset);            }            if (first || this.dragging) {                this.value.current = this.value.target;            }            if (this.dragging || this.glide() || first) {                this.updateOffsetFromValue();                this.callAnimationCallback();            }        },        glide: function () {            var diff = this.value.target - this.value.current;            if (!diff) {                return false;            }            this.value.current += diff * Math.min(this.options.speed * this.timeOffset / 25, 1);            return true;        },        updateOffsetFromValue: function () {            this.offset.current = this.getOffsetsByRatios(this.value.current);            if (this.offset.current != this.offset.prev) {                this.renderHandlePosition();                this.renderProgress();                this.offset.prev = this.offset.current;            }        },        renderProgress: function () {            this.$progress.width(this.offset.current);        },        renderHandlePosition: function () {            this.$handle.css('left', this.offset.current + 'px');        },        setTargetValueByOffset: function (offset) {            var value = this.getRatiosByOffsets(offset),                target = this.getProperValue(value);            this.value.target = target;            this.offset.target = this.getOffsetsByRatios(target);        },        getProperValue: function (value) {            return Math.min(Math.max(value, 0), 1);        },        getRatiosByOffsets: function (value) {            return this.wrapperAvailWidth ? value / this.wrapperAvailWidth : 0;        },        getOffsetsByRatios: function (value) {            return Math.round(value * this.wrapperAvailWidth);        },        onHandleMouseDown: function (e) {            Cursor.refresh(e);            e.preventDefault();            e.stopPropagation();            this.startDrag();        },        onHandleTouchStart: function (e) {            Cursor.refresh(e);            e.stopPropagation();            this.startDrag();        },        onDocumentMouseMove: function (e) {            Cursor.refresh(e);            if (this.dragging) {                e.preventDefault();            }        },        onWrapperTouchMove: function (e) {            Cursor.refresh(e);            e.preventDefault();        },        onWrapperMouseDown: function (e) {            Cursor.refresh(e);            e.preventDefault();            this.startTap();        },        onWrapperTouchStart: function (e) {            Cursor.refresh(e);            e.preventDefault();            this.startTap();        },        onDocumentMouseUp: function () {            this.stopDrag();        },        onDocumentTouchEnd: function () {            this.stopDrag();        },        onWindowResize: function () {            this.reflow();        },        bindMethods: function () {            this.animateWithRequestAnimationFrame = this.animateWithRequestAnimationFrame.bind(this);            this.animate = this.animate.bind(this);            this.onHandleMouseDown = this.onHandleMouseDown.bind(this);            this.onHandleTouchStart = this.onHandleTouchStart.bind(this);            this.onDocumentMouseMove = this.onDocumentMouseMove.bind(this);            this.onWrapperTouchMove = this.onWrapperTouchMove.bind(this);            this.onWrapperMouseDown = this.onWrapperMouseDown.bind(this);            this.onWrapperTouchStart = this.onWrapperTouchStart.bind(this);            this.onDocumentMouseUp = this.onDocumentMouseUp.bind(this);            this.onDocumentTouchEnd = this.onDocumentTouchEnd.bind(this);            this.onWindowResize = this.onWindowResize.bind(this);        },        bindEventListeners: function () {            $(this.$handle).on({                mousedown: this.onHandleMouseDown,                touchstart: this.onHandleTouchStart            });            $(document).on({                mousemove: this.onDocumentMouseMove,                touchend: this.onDocumentTouchEnd,                mouseup: this.onDocumentMouseUp            });            $(this.$wrapper).on({                touchmove: this.onWrapperTouchMove,                mousedown: this.onWrapperMouseDown,                touchstart: this.onWrapperTouchStart            });            $(window).on('resize', this.onWindowResize);            this.animate(true);            this.interval = window.requestAnimationFrame(this.animateWithRequestAnimationFrame);        },        unbindEventListeners: function () {            $(this.$handle).off({                mousedown: this.onHandleMouseDown,                touchstart: this.onHandleTouchStart            });            $(document).off({                mousemove: this.onDocumentMouseMove,                touchend: this.onDocumentTouchEnd,                mouseup: this.onDocumentMouseUp            });            $(this.$wrapper).off({                touchmove: this.onWrapperTouchMove,                mousedown: this.onWrapperMouseDown,                touchstart: this.onWrapperTouchStart            });            $(window).off('resize', this.onWindowResize);            window.cancelAnimationFrame(this.interval);        }    };    var Cursor = {        x: 0,        refresh: function (e) {            var e = e || window.event;            if (e.type == 'mousemove') {                this.x =  e.clientX;            } else if (e.touches) {                this.x = e.touches[0].clientX;            }        }    };    ctc.modules.CustomSlider = CustomSlider;    return ctc;}(CTC || {}, jQuery));